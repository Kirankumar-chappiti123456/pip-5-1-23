#include<stdio.h>
int main()
{
	char *ptr;
	char string[] = "i work at thunder soft";
	ptr = string;    //each string character have the own address and ptr pointer is pointing to the string and the ptr+6 is pointing to the 6 index.
	ptr += 6;
	printf("%s",ptr);
	return 0;
}
output:
at thunder soft



#include<stdio.h>
int main()
{
    const int a = 5;
    const int *ptr;
    ptr = &a;           //assignment of read-only location '*ptr'. the pointer to const we cannot change the value but we can change the address.
    *ptr = 10;
    printf("%d\n", a);
    return 0;
}

#include<stdio.h>
int main()
{
	printf("%d", sizeof(void *)); // size of void is "1". size of void pointer is 8. it is different in 64 and 32 and 16.
}


#include<stdio.h>
void function(char**);
int main()
{
	char *arr[] = { "ant", "bat", "cat", "dog", "egg", "fly" };
	function(arr); // here the array is pointing to the "ant".
	return 0;
}
void function(char **ptr)
{
	char *ptr1;
	ptr1 = (ptr += sizeof(int))[-2];  // here the ptr1 is size of int =4 and the ptr1 is pointing to the "eggs" and [-2] means back step and it is pointing to the "cat" and displaying the "cat" as the final output. 
	printf("%s\n", ptr1);
}



#include<stdio.h>
int main()
{
	struct node
	{
	int a, b, c;
	};
	struct node num = {3, 5, 6};
	struct node *ptr = & num;
	printf("%d\n", *((int*)ptr + 1 + (3-2))); the pointer variable store the address of first value.here we using the bodmas rule and first we sloving () brackets and then addition and increament by 2 .and it is showing the 2 index value.
	return 0;
}


#include<stdio.h>
int main(){
	int a = 130;
	char *ptr;
	ptr = (char *)&a; // here the pointer pointing the char and the value it is integer and we type cast into char and the char is range is -128 to 127 and the integer value is 130 and gives the some negative value as the output. 
	printf("%d ",*ptr);
	return 0;
}
